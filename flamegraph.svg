<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="693" width="1.9608%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="703.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="677" width="1.9608%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="687.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="661" width="1.9608%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="671.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="645" width="1.9608%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="655.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="629" width="1.9608%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="639.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="613" width="1.9608%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="623.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="597" width="1.9608%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="607.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="581" width="1.9608%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="591.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="0.0000%" y="565" width="1.9608%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="575.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="5.8824%" y="661" width="1.9608%" height="15" fill="rgb(220,122,19)"/><text x="6.1324%" y="671.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="5.8824%" y="645" width="1.9608%" height="15" fill="rgb(250,228,42)"/><text x="6.1324%" y="655.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="5.8824%" y="629" width="1.9608%" height="15" fill="rgb(240,193,28)"/><text x="6.1324%" y="639.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="5.8824%" y="613" width="1.9608%" height="15" fill="rgb(216,20,37)"/><text x="6.1324%" y="623.50">[..</text></g><g><title>__GI___ctype_init (1 samples, 1.96%)</title><rect x="7.8431%" y="661" width="1.9608%" height="15" fill="rgb(206,188,39)"/><text x="8.0931%" y="671.50">_..</text></g><g><title>__GI__setjmp (1 samples, 1.96%)</title><rect x="9.8039%" y="661" width="1.9608%" height="15" fill="rgb(217,207,13)"/><text x="10.0539%" y="671.50">_..</text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 1.96%)</title><rect x="13.7255%" y="437" width="1.9608%" height="15" fill="rgb(231,73,38)"/><text x="13.9755%" y="447.50">_..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="13.7255%" y="421" width="1.9608%" height="15" fill="rgb(225,20,46)"/><text x="13.9755%" y="431.50">[..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.96%)</title><rect x="15.6863%" y="421" width="1.9608%" height="15" fill="rgb(210,31,41)"/><text x="15.9363%" y="431.50">&lt;..</text></g><g><title>&lt;allocators::slab::bench::ThreadedMemCacheUtils as allocators::slab::MemCacheUtils&gt;::cpu_id (1 samples, 1.96%)</title><rect x="17.6471%" y="405" width="1.9608%" height="15" fill="rgb(221,200,47)"/><text x="17.8971%" y="415.50">&lt;..</text></g><g><title>allocators::slab::tid::Tid::current (1 samples, 1.96%)</title><rect x="17.6471%" y="389" width="1.9608%" height="15" fill="rgb(226,26,5)"/><text x="17.8971%" y="399.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 1.96%)</title><rect x="17.6471%" y="373" width="1.9608%" height="15" fill="rgb(249,33,26)"/><text x="17.8971%" y="383.50">s..</text></g><g><title>allocators::slab::tid::REGISTRATION::__getit (1 samples, 1.96%)</title><rect x="17.6471%" y="357" width="1.9608%" height="15" fill="rgb(235,183,28)"/><text x="17.8971%" y="367.50">a..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 1.96%)</title><rect x="17.6471%" y="341" width="1.9608%" height="15" fill="rgb(221,5,38)"/><text x="17.8971%" y="351.50">s..</text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 1.96%)</title><rect x="17.6471%" y="325" width="1.9608%" height="15" fill="rgb(247,18,42)"/><text x="17.8971%" y="335.50">s..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 1.96%)</title><rect x="17.6471%" y="309" width="1.9608%" height="15" fill="rgb(241,131,45)"/><text x="17.8971%" y="319.50">c..</text></g><g><title>allocators::slab::MemCache&lt;Utils&gt;::deallocate (6 samples, 11.76%)</title><rect x="17.6471%" y="421" width="11.7647%" height="15" fill="rgb(249,31,29)"/><text x="17.8971%" y="431.50">allocators::slab:..</text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::fetch_update (5 samples, 9.80%)</title><rect x="19.6078%" y="405" width="9.8039%" height="15" fill="rgb(225,111,53)"/><text x="19.8578%" y="415.50">core::sync::at..</text></g><g><title>&lt;allocators::slab::bench::ThreadedMemCacheUtils as allocators::slab::MemCacheUtils&gt;::cpu_id (2 samples, 3.92%)</title><rect x="29.4118%" y="245" width="3.9216%" height="15" fill="rgb(238,160,17)"/><text x="29.6618%" y="255.50">&lt;all..</text></g><g><title>allocators::slab::tid::Tid::current (2 samples, 3.92%)</title><rect x="29.4118%" y="229" width="3.9216%" height="15" fill="rgb(214,148,48)"/><text x="29.6618%" y="239.50">allo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 3.92%)</title><rect x="29.4118%" y="213" width="3.9216%" height="15" fill="rgb(232,36,49)"/><text x="29.6618%" y="223.50">std:..</text></g><g><title>allocators::slab::tid::REGISTRATION::__getit (2 samples, 3.92%)</title><rect x="29.4118%" y="197" width="3.9216%" height="15" fill="rgb(209,103,24)"/><text x="29.6618%" y="207.50">allo..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 3.92%)</title><rect x="29.4118%" y="181" width="3.9216%" height="15" fill="rgb(229,88,8)"/><text x="29.6618%" y="191.50">std:..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (2 samples, 3.92%)</title><rect x="29.4118%" y="165" width="3.9216%" height="15" fill="rgb(213,181,19)"/><text x="29.6618%" y="175.50">std:..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (2 samples, 3.92%)</title><rect x="29.4118%" y="149" width="3.9216%" height="15" fill="rgb(254,191,54)"/><text x="29.6618%" y="159.50">std:..</text></g><g><title>__cxa_thread_atexit_impl (1 samples, 1.96%)</title><rect x="31.3725%" y="133" width="1.9608%" height="15" fill="rgb(241,83,37)"/><text x="31.6225%" y="143.50">_..</text></g><g><title>__GI___pthread_mutex_lock (1 samples, 1.96%)</title><rect x="31.3725%" y="117" width="1.9608%" height="15" fill="rgb(233,36,39)"/><text x="31.6225%" y="127.50">_..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 1.96%)</title><rect x="33.3333%" y="245" width="1.9608%" height="15" fill="rgb(226,3,54)"/><text x="33.5833%" y="255.50">&lt;..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 1.96%)</title><rect x="33.3333%" y="229" width="1.9608%" height="15" fill="rgb(245,192,40)"/><text x="33.5833%" y="239.50">&lt;..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 1.96%)</title><rect x="33.3333%" y="213" width="1.9608%" height="15" fill="rgb(238,167,29)"/><text x="33.5833%" y="223.50">s..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 1.96%)</title><rect x="33.3333%" y="197" width="1.9608%" height="15" fill="rgb(232,182,51)"/><text x="33.5833%" y="207.50">s..</text></g><g><title>&lt;allocators::slab::bench::ThreadedMemCacheUtils as allocators::slab::MemCacheUtils&gt;::allocate_pages (1 samples, 1.96%)</title><rect x="35.2941%" y="229" width="1.9608%" height="15" fill="rgb(231,60,39)"/><text x="35.5441%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::alloc (1 samples, 1.96%)</title><rect x="35.2941%" y="213" width="1.9608%" height="15" fill="rgb(208,69,12)"/><text x="35.5441%" y="223.50">a..</text></g><g><title>__rdl_alloc (1 samples, 1.96%)</title><rect x="35.2941%" y="197" width="1.9608%" height="15" fill="rgb(235,93,37)"/><text x="35.5441%" y="207.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 1.96%)</title><rect x="35.2941%" y="181" width="1.9608%" height="15" fill="rgb(213,116,39)"/><text x="35.5441%" y="191.50">s..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 1.96%)</title><rect x="35.2941%" y="165" width="1.9608%" height="15" fill="rgb(222,207,29)"/><text x="35.5441%" y="175.50">s..</text></g><g><title>__posix_memalign (1 samples, 1.96%)</title><rect x="35.2941%" y="149" width="1.9608%" height="15" fill="rgb(206,96,30)"/><text x="35.5441%" y="159.50">_..</text></g><g><title>_mid_memalign (1 samples, 1.96%)</title><rect x="35.2941%" y="133" width="1.9608%" height="15" fill="rgb(218,138,4)"/><text x="35.5441%" y="143.50">_..</text></g><g><title>_int_memalign (1 samples, 1.96%)</title><rect x="35.2941%" y="117" width="1.9608%" height="15" fill="rgb(250,191,14)"/><text x="35.5441%" y="127.50">_..</text></g><g><title>_int_malloc (1 samples, 1.96%)</title><rect x="35.2941%" y="101" width="1.9608%" height="15" fill="rgb(239,60,40)"/><text x="35.5441%" y="111.50">_..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="35.2941%" y="85" width="1.9608%" height="15" fill="rgb(206,27,48)"/><text x="35.5441%" y="95.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="35.2941%" y="69" width="1.9608%" height="15" fill="rgb(225,35,8)"/><text x="35.5441%" y="79.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="35.2941%" y="53" width="1.9608%" height="15" fill="rgb(250,213,24)"/><text x="35.5441%" y="63.50">[..</text></g><g><title>allocators::slab::MemCache&lt;Utils&gt;::new_slab (3 samples, 5.88%)</title><rect x="35.2941%" y="245" width="5.8824%" height="15" fill="rgb(247,123,22)"/><text x="35.5441%" y="255.50">allocat..</text></g><g><title>allocators::slab::Slab::new (2 samples, 3.92%)</title><rect x="37.2549%" y="229" width="3.9216%" height="15" fill="rgb(231,138,38)"/><text x="37.5049%" y="239.50">allo..</text></g><g><title>core::option::Option&lt;T&gt;::replace (2 samples, 3.92%)</title><rect x="37.2549%" y="213" width="3.9216%" height="15" fill="rgb(231,145,46)"/><text x="37.5049%" y="223.50">core..</text></g><g><title>core::mem::replace (2 samples, 3.92%)</title><rect x="37.2549%" y="197" width="3.9216%" height="15" fill="rgb(251,118,11)"/><text x="37.5049%" y="207.50">core..</text></g><g><title>core::ptr::write (2 samples, 3.92%)</title><rect x="37.2549%" y="181" width="3.9216%" height="15" fill="rgb(217,147,25)"/><text x="37.5049%" y="191.50">core..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="165" width="3.9216%" height="15" fill="rgb(247,81,37)"/><text x="37.5049%" y="175.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="149" width="3.9216%" height="15" fill="rgb(209,12,38)"/><text x="37.5049%" y="159.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="133" width="3.9216%" height="15" fill="rgb(227,1,9)"/><text x="37.5049%" y="143.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="117" width="3.9216%" height="15" fill="rgb(248,47,43)"/><text x="37.5049%" y="127.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="101" width="3.9216%" height="15" fill="rgb(221,10,30)"/><text x="37.5049%" y="111.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="85" width="3.9216%" height="15" fill="rgb(210,229,1)"/><text x="37.5049%" y="95.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="69" width="3.9216%" height="15" fill="rgb(222,148,37)"/><text x="37.5049%" y="79.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="53" width="3.9216%" height="15" fill="rgb(234,67,33)"/><text x="37.5049%" y="63.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="37.2549%" y="37" width="3.9216%" height="15" fill="rgb(247,98,35)"/><text x="37.5049%" y="47.50">[unk..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 13.73%)</title><rect x="29.4118%" y="357" width="13.7255%" height="15" fill="rgb(247,138,52)"/><text x="29.6618%" y="367.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 13.73%)</title><rect x="29.4118%" y="341" width="13.7255%" height="15" fill="rgb(213,79,30)"/><text x="29.6618%" y="351.50">core::iter::traits::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 13.73%)</title><rect x="29.4118%" y="325" width="13.7255%" height="15" fill="rgb(246,177,23)"/><text x="29.6618%" y="335.50">&lt;core::iter::adapters..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 13.73%)</title><rect x="29.4118%" y="309" width="13.7255%" height="15" fill="rgb(230,62,27)"/><text x="29.6618%" y="319.50">core::iter::traits::i..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (7 samples, 13.73%)</title><rect x="29.4118%" y="293" width="13.7255%" height="15" fill="rgb(216,154,8)"/><text x="29.6618%" y="303.50">core::iter::adapters:..</text></g><g><title>slab_run::main::{{closure}}::{{closure}} (7 samples, 13.73%)</title><rect x="29.4118%" y="277" width="13.7255%" height="15" fill="rgb(244,35,45)"/><text x="29.6618%" y="287.50">slab_run::main::{{clo..</text></g><g><title>allocators::slab::MemCache&lt;Utils&gt;::allocate (7 samples, 13.73%)</title><rect x="29.4118%" y="261" width="13.7255%" height="15" fill="rgb(251,115,12)"/><text x="29.6618%" y="271.50">allocators::slab::Mem..</text></g><g><title>allocators::slab::MemCacheCpu::freelist_pop (1 samples, 1.96%)</title><rect x="41.1765%" y="245" width="1.9608%" height="15" fill="rgb(240,54,50)"/><text x="41.4265%" y="255.50">a..</text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::fetch_update (1 samples, 1.96%)</title><rect x="41.1765%" y="229" width="1.9608%" height="15" fill="rgb(233,84,52)"/><text x="41.4265%" y="239.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 15.69%)</title><rect x="29.4118%" y="421" width="15.6863%" height="15" fill="rgb(207,117,47)"/><text x="29.6618%" y="431.50">core::iter::traits::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 15.69%)</title><rect x="29.4118%" y="405" width="15.6863%" height="15" fill="rgb(249,43,39)"/><text x="29.6618%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 15.69%)</title><rect x="29.4118%" y="389" width="15.6863%" height="15" fill="rgb(209,38,44)"/><text x="29.6618%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 15.69%)</title><rect x="29.4118%" y="373" width="15.6863%" height="15" fill="rgb(236,212,23)"/><text x="29.6618%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 1.96%)</title><rect x="43.1373%" y="357" width="1.9608%" height="15" fill="rgb(242,79,21)"/><text x="43.3873%" y="367.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 1.96%)</title><rect x="43.1373%" y="341" width="1.9608%" height="15" fill="rgb(211,96,35)"/><text x="43.3873%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 1.96%)</title><rect x="43.1373%" y="325" width="1.9608%" height="15" fill="rgb(253,215,40)"/><text x="43.3873%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 1.96%)</title><rect x="43.1373%" y="309" width="1.9608%" height="15" fill="rgb(211,81,21)"/><text x="43.3873%" y="319.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.96%)</title><rect x="43.1373%" y="293" width="1.9608%" height="15" fill="rgb(208,190,38)"/><text x="43.3873%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.96%)</title><rect x="43.1373%" y="277" width="1.9608%" height="15" fill="rgb(235,213,38)"/><text x="43.3873%" y="287.50">a..</text></g><g><title>alloc::alloc::alloc (1 samples, 1.96%)</title><rect x="43.1373%" y="261" width="1.9608%" height="15" fill="rgb(237,122,38)"/><text x="43.3873%" y="271.50">a..</text></g><g><title>__rdl_alloc (1 samples, 1.96%)</title><rect x="43.1373%" y="245" width="1.9608%" height="15" fill="rgb(244,218,35)"/><text x="43.3873%" y="255.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 1.96%)</title><rect x="43.1373%" y="229" width="1.9608%" height="15" fill="rgb(240,68,47)"/><text x="43.3873%" y="239.50">s..</text></g><g><title>__GI___libc_malloc (1 samples, 1.96%)</title><rect x="43.1373%" y="213" width="1.9608%" height="15" fill="rgb(210,16,53)"/><text x="43.3873%" y="223.50">_..</text></g><g><title>_int_malloc (1 samples, 1.96%)</title><rect x="43.1373%" y="197" width="1.9608%" height="15" fill="rgb(235,124,12)"/><text x="43.3873%" y="207.50">_..</text></g><g><title>std::sync::condvar::Condvar::wait (2 samples, 3.92%)</title><rect x="45.0980%" y="405" width="3.9216%" height="15" fill="rgb(224,169,11)"/><text x="45.3480%" y="415.50">std:..</text></g><g><title>std::sys_common::condvar::Condvar::wait (2 samples, 3.92%)</title><rect x="45.0980%" y="389" width="3.9216%" height="15" fill="rgb(250,166,2)"/><text x="45.3480%" y="399.50">std:..</text></g><g><title>std::sys::unix::condvar::Condvar::wait (2 samples, 3.92%)</title><rect x="45.0980%" y="373" width="3.9216%" height="15" fill="rgb(242,216,29)"/><text x="45.3480%" y="383.50">std:..</text></g><g><title>__pthread_cond_wait (2 samples, 3.92%)</title><rect x="45.0980%" y="357" width="3.9216%" height="15" fill="rgb(230,116,27)"/><text x="45.3480%" y="367.50">__pt..</text></g><g><title>__futex_abstimed_wait_common64 (2 samples, 3.92%)</title><rect x="45.0980%" y="341" width="3.9216%" height="15" fill="rgb(228,99,48)"/><text x="45.3480%" y="351.50">__fu..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="45.0980%" y="325" width="3.9216%" height="15" fill="rgb(253,11,6)"/><text x="45.3480%" y="335.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="47.0588%" y="309" width="1.9608%" height="15" fill="rgb(247,143,39)"/><text x="47.3088%" y="319.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="47.0588%" y="293" width="1.9608%" height="15" fill="rgb(236,97,10)"/><text x="47.3088%" y="303.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="47.0588%" y="277" width="1.9608%" height="15" fill="rgb(233,208,19)"/><text x="47.3088%" y="287.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="47.0588%" y="261" width="1.9608%" height="15" fill="rgb(216,164,2)"/><text x="47.3088%" y="271.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="47.0588%" y="245" width="1.9608%" height="15" fill="rgb(220,129,5)"/><text x="47.3088%" y="255.50">[..</text></g><g><title>&lt;F as threadpool::FnBox&gt;::call_box (19 samples, 37.25%)</title><rect x="13.7255%" y="469" width="37.2549%" height="15" fill="rgb(242,17,10)"/><text x="13.9755%" y="479.50">&lt;F as threadpool::FnBox&gt;::call_box</text></g><g><title>allocators::slab::bench::MultiThreadedBench&lt;T&gt;::thread::{{closure}} (19 samples, 37.25%)</title><rect x="13.7255%" y="453" width="37.2549%" height="15" fill="rgb(242,107,0)"/><text x="13.9755%" y="463.50">allocators::slab::bench::MultiThreadedBench&lt;T&gt;::thread::{{clo..</text></g><g><title>slab_run::main::{{closure}} (18 samples, 35.29%)</title><rect x="15.6863%" y="437" width="35.2941%" height="15" fill="rgb(251,28,31)"/><text x="15.9363%" y="447.50">slab_run::main::{{closure}}</text></g><g><title>std::sync::barrier::Barrier::wait (3 samples, 5.88%)</title><rect x="45.0980%" y="421" width="5.8824%" height="15" fill="rgb(233,223,10)"/><text x="45.3480%" y="431.50">std::sy..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 1.96%)</title><rect x="49.0196%" y="405" width="1.9608%" height="15" fill="rgb(215,21,27)"/><text x="49.2696%" y="415.50">s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 1.96%)</title><rect x="49.0196%" y="389" width="1.9608%" height="15" fill="rgb(232,23,21)"/><text x="49.2696%" y="399.50">s..</text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 1.96%)</title><rect x="49.0196%" y="373" width="1.9608%" height="15" fill="rgb(244,5,23)"/><text x="49.2696%" y="383.50">s..</text></g><g><title>__GI___pthread_mutex_lock (1 samples, 1.96%)</title><rect x="49.0196%" y="357" width="1.9608%" height="15" fill="rgb(226,81,46)"/><text x="49.2696%" y="367.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;std::sync::mpsc::Receiver&lt;alloc::boxed::Box&lt;dyn threadpool::FnBox+core::marker::Send&gt;&gt;&gt;&gt; (2 samples, 3.92%)</title><rect x="50.9804%" y="469" width="3.9216%" height="15" fill="rgb(247,70,30)"/><text x="51.2304%" y="479.50">core..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 3.92%)</title><rect x="50.9804%" y="453" width="3.9216%" height="15" fill="rgb(212,68,19)"/><text x="51.2304%" y="463.50">&lt;std..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (2 samples, 3.92%)</title><rect x="50.9804%" y="437" width="3.9216%" height="15" fill="rgb(240,187,13)"/><text x="51.2304%" y="447.50">std:..</text></g><g><title>std::sys::unix::mutex::Mutex::unlock (2 samples, 3.92%)</title><rect x="50.9804%" y="421" width="3.9216%" height="15" fill="rgb(223,113,26)"/><text x="51.2304%" y="431.50">std:..</text></g><g><title>__pthread_mutex_unlock_usercnt (2 samples, 3.92%)</title><rect x="50.9804%" y="405" width="3.9216%" height="15" fill="rgb(206,192,2)"/><text x="51.2304%" y="415.50">__pt..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="389" width="1.9608%" height="15" fill="rgb(241,108,4)"/><text x="53.1912%" y="399.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="373" width="1.9608%" height="15" fill="rgb(247,173,49)"/><text x="53.1912%" y="383.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="357" width="1.9608%" height="15" fill="rgb(224,114,35)"/><text x="53.1912%" y="367.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="341" width="1.9608%" height="15" fill="rgb(245,159,27)"/><text x="53.1912%" y="351.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="325" width="1.9608%" height="15" fill="rgb(245,172,44)"/><text x="53.1912%" y="335.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="309" width="1.9608%" height="15" fill="rgb(236,23,11)"/><text x="53.1912%" y="319.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="293" width="1.9608%" height="15" fill="rgb(205,117,38)"/><text x="53.1912%" y="303.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="52.9412%" y="277" width="1.9608%" height="15" fill="rgb(237,72,25)"/><text x="53.1912%" y="287.50">[..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (1 samples, 1.96%)</title><rect x="54.9020%" y="469" width="1.9608%" height="15" fill="rgb(244,70,9)"/><text x="55.1520%" y="479.50">s..</text></g><g><title>std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (1 samples, 1.96%)</title><rect x="54.9020%" y="453" width="1.9608%" height="15" fill="rgb(217,125,39)"/><text x="55.1520%" y="463.50">s..</text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (1 samples, 1.96%)</title><rect x="54.9020%" y="437" width="1.9608%" height="15" fill="rgb(235,36,10)"/><text x="55.1520%" y="447.50">s..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpsc::blocking::WaitToken&gt; (1 samples, 1.96%)</title><rect x="54.9020%" y="421" width="1.9608%" height="15" fill="rgb(251,123,47)"/><text x="55.1520%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mpsc::blocking::Inner&gt;&gt; (1 samples, 1.96%)</title><rect x="54.9020%" y="405" width="1.9608%" height="15" fill="rgb(221,13,13)"/><text x="55.1520%" y="415.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.96%)</title><rect x="54.9020%" y="389" width="1.9608%" height="15" fill="rgb(238,131,9)"/><text x="55.1520%" y="399.50">&lt;..</text></g><g><title>std::panic::catch_unwind (23 samples, 45.10%)</title><rect x="13.7255%" y="581" width="45.0980%" height="15" fill="rgb(211,50,8)"/><text x="13.9755%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (23 samples, 45.10%)</title><rect x="13.7255%" y="565" width="45.0980%" height="15" fill="rgb(245,182,24)"/><text x="13.9755%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (23 samples, 45.10%)</title><rect x="13.7255%" y="549" width="45.0980%" height="15" fill="rgb(242,14,37)"/><text x="13.9755%" y="559.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 45.10%)</title><rect x="13.7255%" y="533" width="45.0980%" height="15" fill="rgb(246,228,12)"/><text x="13.9755%" y="543.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (23 samples, 45.10%)</title><rect x="13.7255%" y="517" width="45.0980%" height="15" fill="rgb(213,55,15)"/><text x="13.9755%" y="527.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 45.10%)</title><rect x="13.7255%" y="501" width="45.0980%" height="15" fill="rgb(209,9,3)"/><text x="13.9755%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>threadpool::spawn_in_pool::{{closure}} (23 samples, 45.10%)</title><rect x="13.7255%" y="485" width="45.0980%" height="15" fill="rgb(230,59,30)"/><text x="13.9755%" y="495.50">threadpool::spawn_in_pool::{{closure}}</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 1.96%)</title><rect x="56.8627%" y="469" width="1.9608%" height="15" fill="rgb(209,121,21)"/><text x="57.1127%" y="479.50">s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 1.96%)</title><rect x="56.8627%" y="453" width="1.9608%" height="15" fill="rgb(220,109,13)"/><text x="57.1127%" y="463.50">s..</text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 1.96%)</title><rect x="56.8627%" y="437" width="1.9608%" height="15" fill="rgb(232,18,1)"/><text x="57.1127%" y="447.50">s..</text></g><g><title>__GI___pthread_mutex_lock (1 samples, 1.96%)</title><rect x="56.8627%" y="421" width="1.9608%" height="15" fill="rgb(215,41,42)"/><text x="57.1127%" y="431.50">_..</text></g><g><title>__lll_lock_wait (1 samples, 1.96%)</title><rect x="56.8627%" y="405" width="1.9608%" height="15" fill="rgb(224,123,36)"/><text x="57.1127%" y="415.50">_..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="56.8627%" y="389" width="1.9608%" height="15" fill="rgb(240,125,3)"/><text x="57.1127%" y="399.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="56.8627%" y="373" width="1.9608%" height="15" fill="rgb(205,98,50)"/><text x="57.1127%" y="383.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="56.8627%" y="357" width="1.9608%" height="15" fill="rgb(205,185,37)"/><text x="57.1127%" y="367.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="56.8627%" y="341" width="1.9608%" height="15" fill="rgb(238,207,15)"/><text x="57.1127%" y="351.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="56.8627%" y="325" width="1.9608%" height="15" fill="rgb(213,199,42)"/><text x="57.1127%" y="335.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="485" width="1.9608%" height="15" fill="rgb(235,201,11)"/><text x="59.0735%" y="495.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="469" width="1.9608%" height="15" fill="rgb(207,46,11)"/><text x="59.0735%" y="479.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="453" width="1.9608%" height="15" fill="rgb(241,35,35)"/><text x="59.0735%" y="463.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="437" width="1.9608%" height="15" fill="rgb(243,32,47)"/><text x="59.0735%" y="447.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="421" width="1.9608%" height="15" fill="rgb(247,202,23)"/><text x="59.0735%" y="431.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="405" width="1.9608%" height="15" fill="rgb(219,102,11)"/><text x="59.0735%" y="415.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="389" width="1.9608%" height="15" fill="rgb(243,110,44)"/><text x="59.0735%" y="399.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="58.8235%" y="373" width="1.9608%" height="15" fill="rgb(222,74,54)"/><text x="59.0735%" y="383.50">[..</text></g><g><title>__GI___mmap64 (2 samples, 3.92%)</title><rect x="60.7843%" y="485" width="3.9216%" height="15" fill="rgb(216,99,12)"/><text x="61.0343%" y="495.50">__GI..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="60.7843%" y="469" width="3.9216%" height="15" fill="rgb(226,22,26)"/><text x="61.0343%" y="479.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="60.7843%" y="453" width="3.9216%" height="15" fill="rgb(217,163,10)"/><text x="61.0343%" y="463.50">[unk..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="60.7843%" y="437" width="3.9216%" height="15" fill="rgb(213,25,53)"/><text x="61.0343%" y="447.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="62.7451%" y="421" width="1.9608%" height="15" fill="rgb(252,105,26)"/><text x="62.9951%" y="431.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="62.7451%" y="405" width="1.9608%" height="15" fill="rgb(220,39,43)"/><text x="62.9951%" y="415.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="62.7451%" y="389" width="1.9608%" height="15" fill="rgb(229,68,48)"/><text x="62.9951%" y="399.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="62.7451%" y="373" width="1.9608%" height="15" fill="rgb(252,8,32)"/><text x="62.9951%" y="383.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="62.7451%" y="357" width="1.9608%" height="15" fill="rgb(223,20,43)"/><text x="62.9951%" y="367.50">[..</text></g><g><title>__GI___libc_malloc (4 samples, 7.84%)</title><rect x="58.8235%" y="549" width="7.8431%" height="15" fill="rgb(229,81,49)"/><text x="59.0735%" y="559.50">__GI___libc..</text></g><g><title>tcache_init.part.0 (4 samples, 7.84%)</title><rect x="58.8235%" y="533" width="7.8431%" height="15" fill="rgb(236,28,36)"/><text x="59.0735%" y="543.50">tcache_init..</text></g><g><title>arena_get2.part.0 (4 samples, 7.84%)</title><rect x="58.8235%" y="517" width="7.8431%" height="15" fill="rgb(249,185,26)"/><text x="59.0735%" y="527.50">arena_get2...</text></g><g><title>new_heap (4 samples, 7.84%)</title><rect x="58.8235%" y="501" width="7.8431%" height="15" fill="rgb(249,174,33)"/><text x="59.0735%" y="511.50">new_heap</text></g><g><title>__GI___mprotect (1 samples, 1.96%)</title><rect x="64.7059%" y="485" width="1.9608%" height="15" fill="rgb(233,201,37)"/><text x="64.9559%" y="495.50">_..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="469" width="1.9608%" height="15" fill="rgb(221,78,26)"/><text x="64.9559%" y="479.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="453" width="1.9608%" height="15" fill="rgb(250,127,30)"/><text x="64.9559%" y="463.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="437" width="1.9608%" height="15" fill="rgb(230,49,44)"/><text x="64.9559%" y="447.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="421" width="1.9608%" height="15" fill="rgb(229,67,23)"/><text x="64.9559%" y="431.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="405" width="1.9608%" height="15" fill="rgb(249,83,47)"/><text x="64.9559%" y="415.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="389" width="1.9608%" height="15" fill="rgb(215,43,3)"/><text x="64.9559%" y="399.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="373" width="1.9608%" height="15" fill="rgb(238,154,13)"/><text x="64.9559%" y="383.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="357" width="1.9608%" height="15" fill="rgb(219,56,2)"/><text x="64.9559%" y="367.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="64.7059%" y="341" width="1.9608%" height="15" fill="rgb(233,0,4)"/><text x="64.9559%" y="351.50">[..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (28 samples, 54.90%)</title><rect x="13.7255%" y="645" width="54.9020%" height="15" fill="rgb(235,30,7)"/><text x="13.9755%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (28 samples, 54.90%)</title><rect x="13.7255%" y="629" width="54.9020%" height="15" fill="rgb(250,79,13)"/><text x="13.9755%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (28 samples, 54.90%)</title><rect x="13.7255%" y="613" width="54.9020%" height="15" fill="rgb(211,146,34)"/><text x="13.9755%" y="623.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (28 samples, 54.90%)</title><rect x="13.7255%" y="597" width="54.9020%" height="15" fill="rgb(228,22,38)"/><text x="13.9755%" y="607.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (5 samples, 9.80%)</title><rect x="58.8235%" y="581" width="9.8039%" height="15" fill="rgb(235,168,5)"/><text x="59.0735%" y="591.50">std::sys::unix..</text></g><g><title>__pthread_getattr_np (5 samples, 9.80%)</title><rect x="58.8235%" y="565" width="9.8039%" height="15" fill="rgb(221,155,16)"/><text x="59.0735%" y="575.50">__pthread_geta..</text></g><g><title>__pthread_getaffinity_np (1 samples, 1.96%)</title><rect x="66.6667%" y="549" width="1.9608%" height="15" fill="rgb(215,215,53)"/><text x="66.9167%" y="559.50">_..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="66.6667%" y="533" width="1.9608%" height="15" fill="rgb(223,4,10)"/><text x="66.9167%" y="543.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="66.6667%" y="517" width="1.9608%" height="15" fill="rgb(234,103,6)"/><text x="66.9167%" y="527.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="66.6667%" y="501" width="1.9608%" height="15" fill="rgb(227,97,0)"/><text x="66.9167%" y="511.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="66.6667%" y="485" width="1.9608%" height="15" fill="rgb(234,150,53)"/><text x="66.9167%" y="495.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="66.6667%" y="469" width="1.9608%" height="15" fill="rgb(228,201,54)"/><text x="66.9167%" y="479.50">[..</text></g><g><title>__sigaltstack (1 samples, 1.96%)</title><rect x="68.6275%" y="613" width="1.9608%" height="15" fill="rgb(222,22,37)"/><text x="68.8775%" y="623.50">_..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="68.6275%" y="597" width="1.9608%" height="15" fill="rgb(237,53,32)"/><text x="68.8775%" y="607.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="68.6275%" y="581" width="1.9608%" height="15" fill="rgb(233,25,53)"/><text x="68.8775%" y="591.50">[..</text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 1.96%)</title><rect x="70.5882%" y="613" width="1.9608%" height="15" fill="rgb(210,40,34)"/><text x="70.8382%" y="623.50">c..</text></g><g><title>core::sync::atomic::atomic_load (1 samples, 1.96%)</title><rect x="70.5882%" y="597" width="1.9608%" height="15" fill="rgb(241,220,44)"/><text x="70.8382%" y="607.50">c..</text></g><g><title>__GI___mmap64 (3 samples, 5.88%)</title><rect x="72.5490%" y="581" width="5.8824%" height="15" fill="rgb(235,28,35)"/><text x="72.7990%" y="591.50">__GI___..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="72.5490%" y="565" width="5.8824%" height="15" fill="rgb(210,56,17)"/><text x="72.7990%" y="575.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="72.5490%" y="549" width="5.8824%" height="15" fill="rgb(224,130,29)"/><text x="72.7990%" y="559.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="72.5490%" y="533" width="5.8824%" height="15" fill="rgb(235,212,8)"/><text x="72.7990%" y="543.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="72.5490%" y="517" width="5.8824%" height="15" fill="rgb(223,33,50)"/><text x="72.7990%" y="527.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="72.5490%" y="501" width="5.8824%" height="15" fill="rgb(219,149,13)"/><text x="72.7990%" y="511.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="72.5490%" y="485" width="5.8824%" height="15" fill="rgb(250,156,29)"/><text x="72.7990%" y="495.50">[unknow..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="74.5098%" y="469" width="3.9216%" height="15" fill="rgb(216,193,19)"/><text x="74.7598%" y="479.50">[unk..</text></g><g><title>__GI___mprotect (3 samples, 5.88%)</title><rect x="78.4314%" y="581" width="5.8824%" height="15" fill="rgb(216,135,14)"/><text x="78.6814%" y="591.50">__GI___..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="78.4314%" y="565" width="5.8824%" height="15" fill="rgb(241,47,5)"/><text x="78.6814%" y="575.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="78.4314%" y="549" width="5.8824%" height="15" fill="rgb(233,42,35)"/><text x="78.6814%" y="559.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="78.4314%" y="533" width="5.8824%" height="15" fill="rgb(231,13,6)"/><text x="78.6814%" y="543.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="78.4314%" y="517" width="5.8824%" height="15" fill="rgb(207,181,40)"/><text x="78.6814%" y="527.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="78.4314%" y="501" width="5.8824%" height="15" fill="rgb(254,173,49)"/><text x="78.6814%" y="511.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="78.4314%" y="485" width="5.8824%" height="15" fill="rgb(221,1,38)"/><text x="78.6814%" y="495.50">[unknow..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="80.3922%" y="469" width="3.9216%" height="15" fill="rgb(206,124,46)"/><text x="80.6422%" y="479.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="82.3529%" y="453" width="1.9608%" height="15" fill="rgb(249,21,11)"/><text x="82.6029%" y="463.50">[..</text></g><g><title>__GI___clone (44 samples, 86.27%)</title><rect x="1.9608%" y="693" width="86.2745%" height="15" fill="rgb(222,201,40)"/><text x="2.2108%" y="703.50">__GI___clone</text></g><g><title>start_thread (43 samples, 84.31%)</title><rect x="3.9216%" y="677" width="84.3137%" height="15" fill="rgb(235,61,29)"/><text x="4.1716%" y="687.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (39 samples, 76.47%)</title><rect x="11.7647%" y="661" width="76.4706%" height="15" fill="rgb(219,207,3)"/><text x="12.0147%" y="671.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (10 samples, 19.61%)</title><rect x="68.6275%" y="645" width="19.6078%" height="15" fill="rgb(222,56,46)"/><text x="68.8775%" y="655.50">std::sys::unix::stack_overflow:..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (10 samples, 19.61%)</title><rect x="68.6275%" y="629" width="19.6078%" height="15" fill="rgb(239,76,54)"/><text x="68.8775%" y="639.50">std::sys::unix::stack_overflow:..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (8 samples, 15.69%)</title><rect x="72.5490%" y="613" width="15.6863%" height="15" fill="rgb(231,124,27)"/><text x="72.7990%" y="623.50">std::sys::unix::stack_ov..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (8 samples, 15.69%)</title><rect x="72.5490%" y="597" width="15.6863%" height="15" fill="rgb(249,195,6)"/><text x="72.7990%" y="607.50">std::sys::unix::stack_ov..</text></g><g><title>std::sys::unix::os::page_size (2 samples, 3.92%)</title><rect x="84.3137%" y="581" width="3.9216%" height="15" fill="rgb(237,174,47)"/><text x="84.5637%" y="591.50">std:..</text></g><g><title>__GI___sysconf (2 samples, 3.92%)</title><rect x="84.3137%" y="565" width="3.9216%" height="15" fill="rgb(206,201,31)"/><text x="84.5637%" y="575.50">__GI..</text></g><g><title>__GI___getpagesize (1 samples, 1.96%)</title><rect x="86.2745%" y="549" width="1.9608%" height="15" fill="rgb(231,57,52)"/><text x="86.5245%" y="559.50">_..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="88.2353%" y="677" width="3.9216%" height="15" fill="rgb(248,177,22)"/><text x="88.4853%" y="687.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="90.1961%" y="661" width="1.9608%" height="15" fill="rgb(215,211,37)"/><text x="90.4461%" y="671.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="90.1961%" y="645" width="1.9608%" height="15" fill="rgb(241,128,51)"/><text x="90.4461%" y="655.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="90.1961%" y="629" width="1.9608%" height="15" fill="rgb(227,165,31)"/><text x="90.4461%" y="639.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="90.1961%" y="613" width="1.9608%" height="15" fill="rgb(228,167,24)"/><text x="90.4461%" y="623.50">[..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="92.1569%" y="661" width="5.8824%" height="15" fill="rgb(228,143,12)"/><text x="92.4069%" y="671.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="92.1569%" y="645" width="5.8824%" height="15" fill="rgb(249,149,8)"/><text x="92.4069%" y="655.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="92.1569%" y="629" width="5.8824%" height="15" fill="rgb(243,35,44)"/><text x="92.4069%" y="639.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="92.1569%" y="613" width="5.8824%" height="15" fill="rgb(246,89,9)"/><text x="92.4069%" y="623.50">[unknow..</text></g><g><title>[unknown] (3 samples, 5.88%)</title><rect x="92.1569%" y="597" width="5.8824%" height="15" fill="rgb(233,213,13)"/><text x="92.4069%" y="607.50">[unknow..</text></g><g><title>[unknown] (2 samples, 3.92%)</title><rect x="94.1176%" y="581" width="3.9216%" height="15" fill="rgb(233,141,41)"/><text x="94.3676%" y="591.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="96.0784%" y="565" width="1.9608%" height="15" fill="rgb(239,167,4)"/><text x="96.3284%" y="575.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="96.0784%" y="549" width="1.9608%" height="15" fill="rgb(209,217,16)"/><text x="96.3284%" y="559.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="96.0784%" y="533" width="1.9608%" height="15" fill="rgb(219,88,35)"/><text x="96.3284%" y="543.50">[..</text></g><g><title>[unknown] (1 samples, 1.96%)</title><rect x="96.0784%" y="517" width="1.9608%" height="15" fill="rgb(220,193,23)"/><text x="96.3284%" y="527.50">[..</text></g><g><title>all (51 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(230,90,52)"/><text x="0.2500%" y="735.50"></text></g><g><title>slab-run (51 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(252,106,19)"/><text x="0.2500%" y="719.50">slab-run</text></g><g><title>_start (6 samples, 11.76%)</title><rect x="88.2353%" y="693" width="11.7647%" height="15" fill="rgb(206,74,20)"/><text x="88.4853%" y="703.50">_start</text></g><g><title>_dl_start (4 samples, 7.84%)</title><rect x="92.1569%" y="677" width="7.8431%" height="15" fill="rgb(230,138,44)"/><text x="92.4069%" y="687.50">_dl_start</text></g><g><title>_dl_sysdep_start (1 samples, 1.96%)</title><rect x="98.0392%" y="661" width="1.9608%" height="15" fill="rgb(235,182,43)"/><text x="98.2892%" y="671.50">_..</text></g><g><title>__GI___tunables_init (1 samples, 1.96%)</title><rect x="98.0392%" y="645" width="1.9608%" height="15" fill="rgb(242,16,51)"/><text x="98.2892%" y="655.50">_..</text></g></svg></svg>